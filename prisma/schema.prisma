// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  TwoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Category {
 id String @id @default(cuid())
 name String
 products Product[]

 createdAt DateTime @default(now())
}

model Product{
  id String @id @default(cuid())
  name String
  description String 
  normalPrice Decimal
  newPrice Decimal
  active Boolean @default(false)
  images Image[]
  hasVariant Boolean
  category Category @relation(fields: [categoryId], references: [id])
  categoryId String
  product AttributeProducto[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([categoryId])
}

model AttributeProducto {
  id String @id @default(cuid())

  attribute Attribute @relation(fields: [attributeId], references: [id])
  attributeId String

  product Product @relation(fields: [productId], references: [id])
  productId String
  @@index([productId])
  @@index([attributeId])
}

model Attribute {
  id String @id @default(cuid())
  name String

  attributeValor Valor[]
  AttributeProducto AttributeProducto[]
}

model Valor{
  id String @id @default(cuid())
  name String

  attribute Attribute @relation(fields: [attributeId], references: [id])
  attributeId String

  variant Variant[]

  @@index([attributeId])
}

model Variant {
  id String @id @default(cuid())
  name String
  description String
  normalPrice Decimal
  newPrice Decimal
  active Boolean @default(false)
  images Image[]

  valor Valor @relation(fields: [valorId], references: [id])
  valorId String


  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([valorId])
}

model Image {
  id String @id @default(cuid())

  productId String
  product Product @relation(fields: [productId], references: [id])
   
  variantId String
  variant Variant @relation(fields: [variantId], references: [id])
  
  @@index([productId])  
}